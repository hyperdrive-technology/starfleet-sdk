name: Publish Packages

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-typescript:
    name: Test TypeScript Package
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ts/package-lock.json
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: |
          cd ts
          pnpm install --frozen-lockfile
          
      - name: Lint
        run: |
          cd ts
          pnpm lint
          
      - name: Type check
        run: |
          cd ts
          pnpm type-check
          
      - name: Build
        run: |
          cd ts
          pnpm build
          
      - name: Test
        run: |
          cd ts
          pnpm test
          
      - name: Test coverage
        run: |
          cd ts
          pnpm test:coverage

  test-go:
    name: Test Go Module
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Download dependencies
        run: |
          cd go
          go mod download
          
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: go
          
      - name: Test
        run: |
          cd go
          go test -v -race -coverprofile=coverage.out ./...
          
      - name: Coverage
        run: |
          cd go
          go tool cover -html=coverage.out -o coverage.html

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test-typescript, test-go]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: |
          cd ts
          pnpm install --frozen-lockfile
          
      - name: Build
        run: |
          cd ts
          pnpm build
          
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Update package version
        run: |
          cd ts
          npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version
          
      - name: Publish to NPM
        run: |
          cd ts
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  tag-go-module:
    name: Tag Go Module
    runs-on: ubuntu-latest
    needs: [test-typescript, test-go]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Create Go module tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "go/v${{ steps.get_version.outputs.VERSION }}"
          git push origin "go/v${{ steps.get_version.outputs.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-schema:
    name: Validate JSON Schema
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install AJV CLI
        run: npm install -g ajv-cli
        
      - name: Validate schema
        run: |
          ajv validate -s schema/scenefile.schema.json --verbose